generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  name                    String?
  emailVerified           Boolean
  image                   String?
  createdAt               DateTime
  updatedAt               DateTime
  sessions                Session[]
  accounts                Account[]
  OrganizationMember      OrganizationMember[]
  OrganizationTransaction OrganizationTransaction[]
  FileUpload              FileUpload[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum OrganizationVerificationStatus {
  PENDING
  VERIFIED
  REJECTED

  @@map("organization_verification_status")
}

enum OrganizationLanguage {
  RU
  EN
  RO
  UA

  @@map("organization_language")
}

enum OrganizationCurrency {
  MDL
  USD
  EUR
  RON
  UAH

  @@map("organization_currency")
}

model Organization {
  id                              String                            @id @default(cuid())
  name                            String
  defaultLanguage                 OrganizationLanguage              @default(RU)
  defaultCurrency                 OrganizationCurrency              @default(MDL)
  websiteUrl                      String?
  logoUrl                         String?
  address                         String?
  phone                           String?
  email                           String?
  city                            String?
  country                         String?
  registrationNumber              String?
  referralCode                    String?
  isActive                        Boolean?                          @default(true)
  isVerified                      Boolean?                          @default(false)
  verificationStatus              OrganizationVerificationStatus?
  createdAt                       DateTime?                         @default(now()) @db.Timestamptz(6)
  updatedAt                       DateTime?                         @default(now()) @db.Timestamptz(6)
  deletedAt                       DateTime?
  members                         OrganizationMember[]
  OrganizationIntegration         OrganizationIntegration[]
  OrganizationTransactionCategory OrganizationTransactionCategory[]
  OrganizationTransaction         OrganizationTransaction[]

  @@map("organization")
}

enum OrganizationMemberRole {
  ADMIN
  MEMBER
  GUEST

  @@map("organization_member_role")
}

model OrganizationMember {
  id             String                 @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationMemberRole
  organization   Organization           @relation(fields: [organizationId], references: [id])
  user           User                   @relation(fields: [userId], references: [id])

  @@map("organization_member")
}

enum OrganizationIntegrationType {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
  TWITTER
  TELEGRAM
  SIMPALS

  @@map("organization_integration_type")
}

model OrganizationIntegration {
  id                     String                            @id @default(cuid())
  type                   OrganizationIntegrationType
  instagramIntegrationId String?
  instagramIntegration   OrganizationIntegrationInstagram? @relation(fields: [instagramIntegrationId], references: [id])
  organizationId         String
  organization           Organization                      @relation(fields: [organizationId], references: [id])
  createdAt              DateTime                          @default(now())
  updatedAt              DateTime                          @updatedAt

  @@map("organization_integration")
}

model OrganizationIntegrationInstagram {
  id                      String                    @id @default(cuid())
  accessToken             String
  tokenType               String
  expiresIn               Int
  instagramUserId         String
  OrganizationIntegration OrganizationIntegration[]

  @@map("organization_integration_instagram")
}

model OrganizationTransactionCategory {
  id                      String                    @id @default(cuid())
  type                    String
  organizationId          String
  organization            Organization              @relation(fields: [organizationId], references: [id])
  OrganizationTransaction OrganizationTransaction[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  color                   String?

  @@map("organization_transaction_category")
}

model OrganizationTransaction {
  id             String                          @id @default(cuid())
  description    String
  amount         Int
  currency       String
  date           DateTime
  categoryId     String
  category       OrganizationTransactionCategory @relation(fields: [categoryId], references: [id])
  assignedTo     String?
  assignedToUser User?                           @relation(fields: [assignedTo], references: [id])
  attachmentUrl  String?
  notes          String?
  organizationId String
  organization   Organization                    @relation(fields: [organizationId], references: [id])
  createdAt      DateTime                        @default(now())
  updatedAt      DateTime                        @updatedAt
  files          FileUpload[]

  @@map("organization_transaction")
}

enum FileUploadType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER

  @@map("file_upload_type")
}

enum FileUploadAccessType {
  PUBLIC
  PRIVATE

  @@map("file_upload_access_type")
}

model FileUpload {
  id                        String                   @id @default(cuid())
  name                      String
  type                      FileUploadType
  mimeType                  String
  accessType                FileUploadAccessType
  size                      Int
  url                       String
  createdBy                 String
  createdByUser             User                     @relation(fields: [createdBy], references: [id])
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  organizationTransactionId String?
  organizationTransaction   OrganizationTransaction? @relation(fields: [organizationTransactionId], references: [id])

  @@map("file_upload")
}
