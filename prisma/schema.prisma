generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  sessions           Session[]
  accounts           Account[]
  OrganizationMember OrganizationMember[]
  Transactions       Transaction[]
  FileUpload         FileUpload[]
  UserChat           UserChat[]
  Customers          Customer[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum OrganizationVerificationStatus {
  PENDING
  VERIFIED
  REJECTED

  @@map("organization_verification_status")
}

enum OrganizationLanguage {
  RU
  EN
  RO
  UA

  @@map("organization_language")
}

enum OrganizationCurrency {
  MDL
  USD
  EUR
  RON
  UAH

  @@map("organization_currency")
}

model Organization {
  id                             String                           @id @default(cuid())
  name                           String
  defaultLanguage                OrganizationLanguage             @default(RU)
  defaultCurrency                OrganizationCurrency             @default(MDL)
  websiteUrl                     String?
  logoUrl                        String?
  address                        String?
  phone                          String?
  email                          String?
  city                           String?
  country                        String?
  registrationNumber             String?
  referralCode                   String?
  isActive                       Boolean?                         @default(true)
  isVerified                     Boolean?                         @default(false)
  verificationStatus             OrganizationVerificationStatus?
  createdAt                      DateTime?                        @default(now()) @db.Timestamptz(6)
  updatedAt                      DateTime?                        @default(now()) @db.Timestamptz(6)
  deletedAt                      DateTime?
  members                        OrganizationMember[]
  Integrations                   Integration[]
  TransactionCategories          TransactionCategory[]
  Transactions                   Transaction[]
  MessagingAgents                MessagingAgent[]
  AIUsages                       AIUsage[]
  ProductsAndServices            ProductAndService[]
  MessagingAgentResponseMessages MessagingAgentResponseMessages[]
  Customers                      Customer[]

  @@map("organization")
}

enum OrganizationMemberRole {
  ADMIN
  MEMBER
  GUEST

  @@map("organization_member_role")
}

model OrganizationMember {
  id             String                 @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationMemberRole
  organization   Organization           @relation(fields: [organizationId], references: [id])
  user           User                   @relation(fields: [userId], references: [id])

  @@map("organization_member")
}

enum IntegrationType {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
  TWITTER
  TELEGRAM
  SIMPALS

  @@map("integration_type")
}

model Integration {
  id                     String                @id @default(cuid())
  type                   IntegrationType
  instagramIntegrationId String?
  instagramIntegration   IntegrationInstagram? @relation(fields: [instagramIntegrationId], references: [id], onDelete: Cascade)
  organizationId         String
  organization           Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  MessagingAgents        MessagingAgent[]

  @@map("integration")
}

enum IntegrationVoiceMessageService {
  ELEVENLABS

  @@map("integration_voice_message_service")
}

enum VoiceMessageService {
  SARAH
  ALEX
  DOMINIQUE
  EMMA
  SOPHIA
  LUCIA

  @@map("voice_message_service")
}

model IntegrationInstagram {
  id                            String                         @id @default(cuid())
  instagramUserId               String                         @unique
  accessToken                   String
  tokenType                     String
  expiresIn                     Int
  instagramBusinessId           String?
  Integrations                  Integration[]
  isBotEnabled                  Boolean                        @default(false)
  isVoiceMessageResponseEnabled Boolean                        @default(false)
  replyDelay                    Int                            @default(0)
  voiceMessageService           IntegrationVoiceMessageService @default(ELEVENLABS)
  voiceMessageVoice             VoiceMessageService            @default(SARAH)

  @@map("integration_instagram")
}

model TransactionCategory {
  id             String        @id @default(cuid())
  type           String
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  Transactions   Transaction[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  color          String?

  @@map("transaction_category")
}

model Transaction {
  id             String              @id @default(cuid())
  description    String
  amount         Int
  currency       String
  date           DateTime
  categoryId     String
  category       TransactionCategory @relation(fields: [categoryId], references: [id])
  assignedTo     String?
  assignedToUser User?               @relation(fields: [assignedTo], references: [id])
  attachmentUrl  String?
  notes          String?
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  files          FileUpload[]

  @@map("transaction")
}

enum FileUploadType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  KNOWLEDGE_BASE
  OTHER

  @@map("file_upload_type")
}

enum FileUploadAccessType {
  PUBLIC
  PRIVATE

  @@map("file_upload_access_type")
}

model FileUpload {
  id                  String               @id @default(cuid())
  name                String
  type                FileUploadType
  mimeType            String
  accessType          FileUploadAccessType
  size                Int
  url                 String
  createdBy           String
  createdByUser       User                 @relation(fields: [createdBy], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  transactionId       String?
  transaction         Transaction?         @relation(fields: [transactionId], references: [id])
  productAndServiceId String?
  productAndService   ProductAndService?   @relation(fields: [productAndServiceId], references: [id])

  @@map("file_upload")
}

enum AgentStatus {
  PENDING
  ACTIVE

  @@map("agent_status")
}

model MessagingAgent {
  id                             String       @id @default(cuid())
  organizationId                 String
  organization                   Organization @relation(fields: [organizationId], references: [id])
  status                         AgentStatus  @default(PENDING)
  prompt                         String?
  integrationId                  String?
  integration                    Integration? @relation(fields: [integrationId], references: [id])
  hasAccessToProductsAndServices Boolean      @default(false)
  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt

  @@map("messaging_agent")
}

model AIUsage {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  tokens         Int          @default(0)
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("ai_usage")
}

enum OrganizationProductsAndServiceStatus {
  ACTIVE
  IN_REVIEW
  DELETED

  @@map("products_and_service_status")
}

model ProductAndService {
  id              String                               @id @default(cuid())
  organizationId  String
  organization    Organization                         @relation(fields: [organizationId], references: [id])
  name            String
  description     String?
  price           Int?                                 @default(0)
  priceStartsFrom Int?                                 @default(0)
  currency        String?                              @default("MDL")
  status          OrganizationProductsAndServiceStatus @default(ACTIVE)
  files           FileUpload[]
  websiteUrlLink  String?
  createdAt       DateTime                             @default(now())
  updatedAt       DateTime                             @updatedAt

  @@map("product_and_service")
}

model MessagingAgentResponseMessages {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  messageId      String
  response       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messaging_agent_response_messages")
}

model CurrencyRate {
  id           String   @id @default(cuid())
  currency     String   @unique
  symbol       String?
  combinations Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("currency_rate")
}

model UserChat {
  id        String   @id @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messages  Json
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("user_chats")
}

enum CustomerStatus {
  ACTIVE
  ARCHIVED

  @@map("customer_status")
}

model Customer {
  id             String         @id @default(cuid())
  name           String
  email          String?
  websiteUrl     String?
  contactPerson  String?
  phoneNumber    String?
  avatarUrl      String?
  country        String?
  city           String?
  addressLine1   String?
  addressLine2   String?
  zipCode        String?
  state          String?
  vatNumber      String?
  notes          String?
  status         CustomerStatus @default(ACTIVE)
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  createdBy      String
  createdByUser  User           @relation(fields: [createdBy], references: [id])
  updatedAt      DateTime       @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("customer")
}
