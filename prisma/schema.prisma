generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  name                    String?
  emailVerified           Boolean
  image                   String?
  createdAt               DateTime
  updatedAt               DateTime
  sessions                Session[]
  accounts                Account[]
  OrganizationMember      OrganizationMember[]
  OrganizationTransaction OrganizationTransaction[]
  FileUpload              FileUpload[]
  UserChat                UserChat[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum OrganizationVerificationStatus {
  PENDING
  VERIFIED
  REJECTED

  @@map("organization_verification_status")
}

enum OrganizationLanguage {
  RU
  EN
  RO
  UA

  @@map("organization_language")
}

enum OrganizationCurrency {
  MDL
  USD
  EUR
  RON
  UAH

  @@map("organization_currency")
}

model Organization {
  id                              String                            @id @default(cuid())
  name                            String
  defaultLanguage                 OrganizationLanguage              @default(RU)
  defaultCurrency                 OrganizationCurrency              @default(MDL)
  websiteUrl                      String?
  logoUrl                         String?
  address                         String?
  phone                           String?
  email                           String?
  city                            String?
  country                         String?
  registrationNumber              String?
  referralCode                    String?
  isActive                        Boolean?                          @default(true)
  isVerified                      Boolean?                          @default(false)
  verificationStatus              OrganizationVerificationStatus?
  createdAt                       DateTime?                         @default(now()) @db.Timestamptz(6)
  updatedAt                       DateTime?                         @default(now()) @db.Timestamptz(6)
  deletedAt                       DateTime?
  members                         OrganizationMember[]
  OrganizationIntegration         OrganizationIntegration[]
  OrganizationTransactionCategory OrganizationTransactionCategory[]
  OrganizationTransaction         OrganizationTransaction[]
  OrganizationMessagingAgent      OrganizationMessagingAgent[]
  OrganizationAIUsage             OrganizationAIUsage[]
  OrganizationProductsAndServices OrganizationProductsAndServices[]
  MessagingAgentResponseMessages  MessagingAgentResponseMessages[]

  @@map("organization")
}

enum OrganizationMemberRole {
  ADMIN
  MEMBER
  GUEST

  @@map("organization_member_role")
}

model OrganizationMember {
  id             String                 @id @default(cuid())
  organizationId String
  userId         String
  role           OrganizationMemberRole
  organization   Organization           @relation(fields: [organizationId], references: [id])
  user           User                   @relation(fields: [userId], references: [id])

  @@map("organization_member")
}

enum OrganizationIntegrationType {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
  TWITTER
  TELEGRAM
  SIMPALS

  @@map("organization_integration_type")
}

model OrganizationIntegration {
  id                         String                            @id @default(cuid())
  type                       OrganizationIntegrationType
  instagramIntegrationId     String?
  instagramIntegration       OrganizationIntegrationInstagram? @relation(fields: [instagramIntegrationId], references: [id], onDelete: Cascade)
  organizationId             String
  organization               Organization                      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt                  DateTime                          @default(now())
  updatedAt                  DateTime                          @updatedAt
  OrganizationMessagingAgent OrganizationMessagingAgent[]

  @@map("organization_integration")
}

enum OrganizationIntegrationVoiceMessageService {
  ELEVENLABS
}

enum OrganizationIntegrationVoiceMessageVoice {
  SARAH
  ALEX
  DOMINIQUE
  EMMA
  SOPHIA
  LUCIA
}

model OrganizationIntegrationInstagram {
  id                            String                                     @id @default(cuid())
  instagramUserId               String                                     @unique
  accessToken                   String
  tokenType                     String
  expiresIn                     Int
  instagramBusinessId           String?
  OrganizationIntegration       OrganizationIntegration[]
  isBotEnabled                  Boolean                                    @default(false)
  isVoiceMessageResponseEnabled Boolean                                    @default(false)
  replyDelay                    Int                                        @default(0)
  voiceMessageService           OrganizationIntegrationVoiceMessageService @default(ELEVENLABS)
  voiceMessageVoice             OrganizationIntegrationVoiceMessageVoice   @default(SARAH)

  @@map("organization_integration_instagram")
}

model OrganizationTransactionCategory {
  id                      String                    @id @default(cuid())
  type                    String
  organizationId          String
  organization            Organization              @relation(fields: [organizationId], references: [id])
  OrganizationTransaction OrganizationTransaction[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  color                   String?

  @@map("organization_transaction_category")
}

model OrganizationTransaction {
  id             String                          @id @default(cuid())
  description    String
  amount         Int
  currency       String
  date           DateTime
  categoryId     String
  category       OrganizationTransactionCategory @relation(fields: [categoryId], references: [id])
  assignedTo     String?
  assignedToUser User?                           @relation(fields: [assignedTo], references: [id])
  attachmentUrl  String?
  notes          String?
  organizationId String
  organization   Organization                    @relation(fields: [organizationId], references: [id])
  createdAt      DateTime                        @default(now())
  updatedAt      DateTime                        @updatedAt
  files          FileUpload[]

  @@map("organization_transaction")
}

enum FileUploadType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  KNOWLEDGE_BASE
  OTHER

  @@map("file_upload_type")
}

enum FileUploadAccessType {
  PUBLIC
  PRIVATE

  @@map("file_upload_access_type")
}

model FileUpload {
  id                                String                           @id @default(cuid())
  name                              String
  type                              FileUploadType
  mimeType                          String
  accessType                        FileUploadAccessType
  size                              Int
  url                               String
  createdBy                         String
  createdByUser                     User                             @relation(fields: [createdBy], references: [id])
  createdAt                         DateTime                         @default(now())
  updatedAt                         DateTime                         @updatedAt
  organizationTransactionId         String?
  organizationTransaction           OrganizationTransaction?         @relation(fields: [organizationTransactionId], references: [id])
  OrganizationProductsAndServices   OrganizationProductsAndServices? @relation(fields: [organizationProductsAndServicesId], references: [id])
  organizationProductsAndServicesId String?

  @@map("file_upload")
}

enum OrganizationAgentStatus {
  PENDING
  ACTIVE

  @@map("organization_agent_status")
}

model OrganizationMessagingAgent {
  id             String                   @id @default(cuid())
  organizationId String
  organization   Organization             @relation(fields: [organizationId], references: [id])
  status         OrganizationAgentStatus  @default(PENDING)
  prompt         String?
  integrationId  String?
  integration    OrganizationIntegration? @relation(fields: [integrationId], references: [id])
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt

  @@map("organization_messaging_agent")
}

model OrganizationAIUsage {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  tokens         Int          @default(0)
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("organization_ai_usage")
}

enum OrganizationProductsAndServiceStatus {
  ACTIVE
  IN_REVIEW
  DELETED

  @@map("organization_products_and_service_status")
}

model OrganizationProductsAndServices {
  id              String                               @id @default(cuid())
  organizationId  String
  organization    Organization                         @relation(fields: [organizationId], references: [id])
  name            String
  description     String?
  price           Int?                                 @default(0)
  priceStartsFrom Int?                                 @default(0)
  currency        String?                              @default("MDL")
  status          OrganizationProductsAndServiceStatus @default(ACTIVE)
  files           FileUpload[]
  websiteUrlLink  String?
  createdAt       DateTime                             @default(now())
  updatedAt       DateTime                             @updatedAt

  @@map("organization_products_and_services")
}

model MessagingAgentResponseMessages {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  messageId      String
  response       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messaging_agent_response_messages")
}

model CurrencyRate {
  id           String   @id @default(cuid())
  currency     String   @unique
  symbol       String?
  combinations Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("currency_rate")
}

model UserChat {
  id        String   @id @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messages  Json
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("user_chats")
}
